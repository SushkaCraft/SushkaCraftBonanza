import telebot
from telebot import types

import sqlite3

import time
import random


TOKEN = 'TOKEN'


bot = telebot.TeleBot(TOKEN)


conn = sqlite3.connect('gamedata.db', check_same_thread=False)
cursor = conn.cursor()


cursor.execute('''CREATE TABLE IF NOT EXISTS users 
                  (id INTEGER PRIMARY KEY,
                  user_id INTEGER,
                  username TEXT,
                  balance INTEGER DEFAULT 0,
                  bet INTEGER DEFAULT 0,
                  admin INTEGER)''')
conn.commit()


def get_or_create_user(user_id):
    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    user = cursor.fetchone()
    if not user:
        cursor.execute('INSERT INTO users (user_id, balance, admin) VALUES (?, 0, 0)', (user_id,))
        conn.commit()
        cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
        user = cursor.fetchone()
    return user


symbols_info = {
    "‚ù§": {"probability": 7, "count_needed": 8, "multiplier": 50},
    "üíú": {"probability": 7, "count_needed": 8, "multiplier": 25},
    "üíö": {"probability": 7, "count_needed": 8, "multiplier": 15},
    "üíô": {"probability": 7, "count_needed": 8, "multiplier": 12},
    "üçé": {"probability": 14, "count_needed": 8, "multiplier": 10},
    "üçë": {"probability": 14, "count_needed": 8, "multiplier": 8},
    "üçâ": {"probability": 14, "count_needed": 8, "multiplier": 5},
    "üçá": {"probability": 14, "count_needed": 8, "multiplier": 4},
    "üçå": {"probability": 14.5, "count_needed": 8, "multiplier": 2},
    "üç≠": {"probability": 1.5, "count_needed": 4, "multiplier": 1200}
    #–î–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ–Ω—É—Å–∫–∏ –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–Ω–æ–∂–∏—Ç–µ–ª—å –∫–∞–∫ None –∏ –¥–æ–ø–∏—Å–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
}


def create_board(width, height):
    return [[random.choices(population=list(symbols_info.keys()),
            weights=[info['probability'] for info in symbols_info.values()])[0] for _ in range(width)] for _ in range(height)]


def update_board(board, symbol_counts):
    for j in range(len(board[0])):
        column = [board[i][j] for i in range(len(board))]
        new_column = [sym for sym in column if symbol_counts[sym] < symbols_info[sym]['count_needed']]
        while len(new_column) < len(board):
            new_column.insert(0, random.choices(population=list(symbols_info.keys()),
                        weights=[info['probability'] for info in symbols_info.values()])[0])
        for i in range(len(board)):
            board[i][j] = new_column[i]


def send_game_board(message, board, bet):
    user_id = message.from_user.id
    user = get_or_create_user(user_id)

    symbol_counts = {symbol: 0 for symbol in symbols_info}
    for row in board:
        for symbol in row:
            symbol_counts[symbol] += 1

    board_display = "\n".join(" ".join(row) for row in board)
    result_message = "–ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ:\n" + board_display
    played_symbols = []
    win = 0

    for symbol, count in symbol_counts.items():
        info = symbols_info[symbol]
        if count >= info['count_needed']:
            played_symbols.append(f"–°–∏–º–≤–æ–ª {symbol} —Å—ã–≥—Ä–∞–ª, –≤—Å–µ–≥–æ –Ω–∞ –ø–æ–ª–µ {count} —à—Ç.")
            if info['multiplier']:
                win += bet * info['multiplier']

    if played_symbols:
        result_message += "\n" + "\n".join(played_symbols)
        bot.send_message(message.chat.id, result_message + f"\n–í–∞—à –≤—ã–∏–≥—Ä—ã—à —Å–æ—Å—Ç–∞–≤–∏–ª {win}‚ÇΩ")
        update_board(board, symbol_counts)
        cursor.execute('UPDATE users SET balance = balance + ? WHERE user_id = ?', (win, user_id))
        conn.commit()
        time.sleep(1)
        send_game_board(message, board, bet)
    else:
        bot.send_message(message.chat.id,
                         result_message + "\n–ù–∏ –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª –Ω–µ —Å—ã–≥—Ä–∞–ª\n–°—ã–≥—Ä–∞—Ç—å –µ—â—ë —Ä–∞–∑ /play\n–í—ã –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–∏–≥—Ä–∞–ª–∏.")


@bot.message_handler(commands=['start'])
def handle_start(message):
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ —Å–ª–æ—Ç –æ—Ç SushkaCraft! –î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –≤–≤–µ–¥–∏—Ç–µ /play\n–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /balance")


@bot.message_handler(commands=['play'])
def handle_play(message):
    user_id = message.from_user.id
    user = get_or_create_user(user_id)

    if user[4] == 0:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å—Ç–∞–≤–∫—É –∫–æ–º–∞–Ω–¥–æ–π /bet.")
        return

    if user[3] < user[4]:
        bot.send_message(message.chat.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.")
        return

    cursor.execute('UPDATE users SET balance = balance - ? WHERE user_id = ?', (user[4], user_id))
    conn.commit()

    board = create_board(6, 5)
    send_game_board(message, board, user[4])


@bot.message_handler(commands=['balance'])
def handle_balance(message):
    user = get_or_create_user(message.from_user.id)
    markup = types.InlineKeyboardMarkup()
    button_deposit = types.InlineKeyboardButton("–ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data='deposit')
    button_withdraw = types.InlineKeyboardButton("–í—ã–≤–µ—Å—Ç–∏", callback_data='withdraw')
    markup.add(button_deposit, button_withdraw)
    bot.send_message(message.chat.id, f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user[3]}‚ÇΩ", reply_markup=markup)


@bot.message_handler(commands=['bet'])
def handle_bet(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏ (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä 10):")
    bot.register_next_step_handler(msg, set_bet, message.from_user.id)


def set_bet(message, user_id):
    bet_size = int(message.text)
    if bet_size < 10:
        bot.send_message(message.chat.id, "–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 10.")
        return
    cursor.execute('UPDATE users SET bet = ? WHERE user_id = ?', (bet_size, user_id))
    conn.commit()
    bot.send_message(message.chat.id, f"–°—Ç–∞–≤–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {bet_size}‚ÇΩ")


@bot.callback_query_handler(func=lambda call: True)
def handle_query(call):
    if call.data == 'deposit':
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:")
        bot.register_next_step_handler(msg, process_deposit_amount, call.from_user.id)
    elif call.data == 'withdraw':
        bot.answer_callback_query(call.id, "–í—ã–≤–æ–¥ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)


def process_deposit_amount(message, user_id):
    amount = int(message.text)
    cursor.execute('UPDATE users SET balance = balance + ? WHERE user_id = ?', (amount, user_id))
    conn.commit()
    bot.send_message(message.chat.id, f"–í–∞—à –±–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount}‚ÇΩ")


bot.polling()
